(function(){

var R = require('ramda')
var map

// will be generated by database
var homes = require('./data.json')

function initMap() {
  var opts = require('./opts')
  var undoPin = require('./undoPin')
  var logPath = require('./logPath')

  var mapDiv = 'map-canvas'
  var mapOpts = opts.mapOpts

  map = new google.maps.Map(document.getElementById(mapDiv), mapOpts)

  var points = new google.maps.MVCArray()
  var polyOpts = opts.polyOpts
  var polygon = new google.maps.Polygon(polyOpts)
  polygon.setMap(map)

  var currentPath = polygon.getPath()
  google.maps.event.addListener(map, 'click', function(e) {
    if(currentPath.length < 6) currentPath.push(e.latLng)
  })

  undoPin()
  logPath(currentPath)

  var getPriceRange = document.getElementById('get-price-range')
  getPriceRange.addEventListener('click', function(e){
    e.preventDefault()
    var minPrice = document.getElementById('min-price').value
    var maxPrice = document.getElementById('max-price').value
    console.log(minPrice, maxPrice)
  })

  var checkAgainstMapBtn = document.getElementById('check-against-map')
  checkAgainstMapBtn.addEventListener('click', function(e){

    e.preventDefault()
    var results = []
    var parentNode = document.getElementById('check-map-log')
    var minPrice = document.getElementById('min-price').value
    var maxPrice = document.getElementById('max-price').value

    R.map(function(home){
      var datum = new google.maps.LatLng(home)
      if(home.price >= minPrice && home.price <= maxPrice){
        if(google.maps.geometry.poly.containsLocation(datum, polygon)) {
            results.push(home)
        }
      }
    }, homes)

    //break while loop and forEach into own module
    while (parentNode.firstChild) {
      parentNode.removeChild(parentNode.firstChild);
    }
    results.forEach(function(home, idx){
      var checkMapTemplate = `${home.lat} ${home.lng}`
      var node = document.createElement('LI')
      var textnode = document.createTextNode(checkMapTemplate)
      node.appendChild(textnode)
      parentNode.appendChild(node)
    })

  })


}

window.onload = initMap

}())
